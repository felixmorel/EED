import numpy as np
import matplotlib.pyplot as plt

def zones(N):
    if N==3:
        Zones=np.array([[55,85] ,[115,130],[80,90] ,[230,255],[80,90], [230,255]])
        Units=np.array([0,0,1,1,2,2])
        
    elif N==6:
        Zones=np.array([[25,32], [60,67],[50,60], [92,102],[105,117], [165,177],[55,85], [115,130], [80,90], [230,255],[80,90], [230,255]])
        Units=np.array([0,0,1,1,2,2,3,3,4,4,5,5])   
        
    elif N==10: #Inspired from 15 generator system
        Zones=np.array([[30,40],[55,65],[230,255],[365,395],[430,455],[180,200], [305,335], [390,420]])
        Units=np.array([1,1,8,8,8,9,9,9])   
        
    return (Zones,Units)

def loss(N):
    if N==2:
        B=np.array([[0.000140,0.000019],
        [0.000019,0.000071]])
    
    elif N==3:
        B=np.array([[0.000140,0.000017,0.000019],
        [0.000017,0.000060,0.000016],
        [0.000019, 0.000016, 0.000071]])
    elif N==6:
        B=np.array([[0.000140,0.000017,0.000015,0.000019,0.000026,0.000022],
        [0.000017,0.000060,0.000013,0.000016,0.000015,0.000020],
        [0.000015,0.000013,0.000065,0.000017,0.000024,0.000019],
        [0.000019,0.000016,0.000017,0.000071,0.000030,0.000025],
        [0.000026,0.000015,0.000024,0.000030,0.000069,0.000032],
        [0.000022,0.000020,0.000019,0.000025,0.000032,0.000085]])  
        
    elif N==10:
        B=np.array([[0.000049,0.000014,0.000015,0.000015,0.000016,0.000017,0.000017,0.000018,0.000019,0.000020],
        [0.000014,0.000045,0.000016,0.000016,0.000017,0.000015,0.000015,0.000016,0.000018,0.000018],
        [0.000015,0.000016,0.000039,0.000010,0.000012,0.000012,0.000014,0.000014,0.000016,0.000016],
        [0.000015,0.000016,0.000010,0.000040,0.000014,0.000010,0.000011,0.000012,0.000014,0.000015],
        [0.000016,0.000017,0.000012,0.000014,0.000035,0.000011,0.000013,0.000013,0.000015,0.000016],
        [0.000017,0.000015,0.000012,0.000010,0.000011,0.000036,0.000012,0.000012,0.000014,0.000015],
        [0.000017,0.000015,0.000014,0.000011,0.000013,0.000012,0.000038,0.000016,0.000016,0.000018],
        [0.000018,0.000016,0.000014,0.000012,0.000013,0.000012,0.000016,0.000040,0.000015,0.000016],
        [0.000019,0.000018,0.000016,0.000014,0.000015,0.000014,0.000016,0.000015,0.000042,0.000019],
        [0.000020,0.000018,0.000016,0.000015,0.000016,0.000015,0.000018,0.000016,0.000019,0.000044]])

    else:
        B=np.array([[0.000049,0.000014,0.000015,0.000015,0.000016,0.000017,0.000017,0.000018,0.000019,0.000020],
        [0.000014,0.000045,0.000016,0.000016,0.000017,0.000015,0.000015,0.000016,0.000018,0.000018],
        [0.000015,0.000016,0.000039,0.000010,0.000012,0.000012,0.000014,0.000014,0.000016,0.000016],
        [0.000015,0.000016,0.000010,0.000040,0.000014,0.000010,0.000011,0.000012,0.000014,0.000015],
        [0.000016,0.000017,0.000012,0.000014,0.000035,0.000011,0.000013,0.000013,0.000015,0.000016],
        [0.000017,0.000015,0.000012,0.000010,0.000011,0.000036,0.000012,0.000012,0.000014,0.000015],
        [0.000017,0.000015,0.000014,0.000011,0.000013,0.000012,0.000038,0.000016,0.000016,0.000018],
        [0.000018,0.000016,0.000014,0.000012,0.000013,0.000012,0.000016,0.000040,0.000015,0.000016],
        [0.000019,0.000018,0.000016,0.000014,0.000015,0.000014,0.000016,0.000015,0.000042,0.000019],
        [0.000020,0.000018,0.000016,0.000015,0.000016,0.000015,0.000018,0.000016,0.000019,0.000044]])

        n=len(B)
        Tril= np.tril(B,k=-1)
        Diag= np.tril(B,k=0)-Tril
        Tril=Tril+Diag/4
        Vextend = np.zeros((N, n))
        nls= np.linspace(0, 1, N)
        ols = np.linspace(0, 1, n)
        for col in range(n):
            Vextend[:,col] = np.interp(nls, ols, Tril[:,col])
        
        Btril=np.zeros((N,N))
        for row in range(N):
            Btril[row,:] = np.interp(nls, ols, Vextend[row,:])
        
        Bdiag=np.interp(nls,ols, np.diag(B))
        Bdiag=Bdiag * np.eye(N)
        
        Btilde= Btril + Bdiag + Btril.T
        B=Btilde
    return(B)
   
def load(N):
    if N==2: #Data of 6 gen problem, using units 1,4
        Demand = 300 #MW
        Pmax = np.array([125,  225])
        Pmin = np.array([10,  35 ])
        a = np.array([756.7988 , 1049.9977 ])
        b = np.array([38.5390, 40.3965 ])
        c = np.array([0.15247, 0.02803])
        alpha =np.array([13.8593, 40.2669])
        beta = np.array([0.32767,-0.54551])
        gamma = np.array([0.00419, 0.00683])
        delta=np.zeros(N)
        eta=np.zeros(N)
        UR = np.array([45, 55])  
        DR = np.array([64, 65])
    
    elif N==3: 
        #Data of 6 gen problem, using units 1,2,4
        Demand = 420 #MW
        Pmax = np.array([125, 150,  225])
        Pmin = np.array([10, 10,  35 ])  
        a = np.array([756.7988 ,451.3251 , 1049.9977 ])
        b = np.array([38.5390,46.1591, 40.3965 ])
        c = np.array([0.15247, 0.10587, 0.02803])
        alpha =np.array([13.8593, 13.8593, 40.2669])
        beta = np.array([0.32767,0.32767,-0.54551])
        gamma = np.array([0.00419,0.00419, 0.00683])
        delta=np.zeros(N)
        eta=np.zeros(N)
        UR = np.array([45,55, 55])  
        DR = np.array([64,78, 65])

        
    elif N==6: 
        Demand = 1200 #MW
        Pmax = np.array([125, 150, 210 , 225, 315, 325])
        Pmin = np.array([10, 10, 35, 35, 125, 130])
        a = np.array([756.7988, 451.3251 ,1243.5311 , 1049.9977 , 1356.6592 ,1658.5696])
        b = np.array([38.5390, 46.1591, 38.3055 ,40.3965 ,38.2704, 36.3278])
        c = np.array([0.15247, 0.10587,	0.03546, 0.02803, 0.01799,	0.02111])
        alpha =np.array([13.8593, 13.8593,40.2669,40.2669,42.8955,42.8955])
        beta = np.array([0.32767,0.32767,-0.54551,-0.54551,-0.51116,-0.51116])
        gamma = np.array([0.00419, 0.00419, 0.00683, 0.00683, 0.00461, 0.00461])
        delta=np.zeros(N)
        eta=np.zeros(N)
        UR = np.array([45, 55, 50 , 55, 80, 80]) 
        DR = np.array([64, 78, 90 , 65, 120, 120])
        """
        
        """

    
    elif N==10: 
        Demand = 2000 #MW
        Pmin=np.array([10,  20,  47,  20,  50,  70,  60,  70, 135, 150])
        Pmax= np.array([55, 80, 120, 130, 160, 240, 300, 340, 470, 470])
        a= np.array([1000.403, 950.606, 900.705, 800.705, 756.799, 451.325, 1243.531, 1049.998, 1658.569, 1356.659])
        b=np.array([40.5407, 39.5804, 36.5104, 39.5104, 38.5390, 46.1592, 38.3055, 40.3965, 36.3278, 38.2704])
        c=np.array([0.12951, 0.10908, 0.12511, 0.12111, 0.15247, 0.10587, 0.03546, 0.02803, 0.02111, 0.01799])
        
        alpha=np.array([360.0012, 350.0056, 330.0056, 330.0056, 13.8593, 13.8593, 40.2669, 40.2669, 42.8955, 42.8955])
        beta=np.array([-3.9864, -3.9524, -3.9023, -3.9023, 0.3277, 0.3277, -0.5455, -0.5455, -0.5112, -0.5112])
        gamma=np.array([0.04702, 0.04652, 0.04652, 0.04652, 0.00420, 0.00420, 0.00680, 0.00680, 0.00460, 0.00460])
        delta=np.array([0.01234, 0.01234, 0.01215, 0.01215, 0.01200, 0.01200, 0.01290, 0.01203, 0.01234, 0.01234])
        eta=np.array([0.25475, 0.25475, 0.25163, 0.25163, 0.24970, 0.24970, 0.24800, 0.24990, 0.25470, 0.25470])
        
        UR = np.array([30, 30, 30, 30, 50,50,50,80,80,80])  
        DR = np.array([30, 30, 30, 30, 50,50,50,80,80,80])
    
    
    elif N==40:
        Demand =10500 # 10500 #7500 #with transmission-  MW
        Pmin=np.array([36, 36, 60, 80, 47, 68, 110, 135, 135, 130,
                       94, 94, 125, 125, 125, 125, 220, 220, 242, 242,
                       254, 254, 254, 254, 254, 254, 10, 10, 10, 47,
                       60, 60, 60, 90, 90, 90, 25, 25, 25, 242])
        Pmax=np.array([114, 114, 120, 190, 97, 140, 300, 300, 300, 300,
                       375, 375, 500, 500, 500, 500, 500, 500, 550, 550,
                       550, 550, 550, 550, 550, 550, 150, 150, 150, 97,
                       190, 190, 190, 200, 200, 200, 110, 110, 110, 550])
        a=np.array([94.705, 94.705, 309.540, 369.030, 148.890, 222.330, 287.710, 391.980, 455.760, 722.820, 635.200, 654.690, 913.400, 1760.400, 1760.400, 1760.400, 647.850, 649.690, 647.830, 647.810, 785.960, 785.960, 794.530, 794.530, 801.320, 801.320, 1055.100, 1055.100, 1055.100, 148.890, 222.920, 222.920, 222.920, 107.870, 116.580, 116.580, 307.450, 307.450, 307.450, 647.830])
        b=np.array([6.73, 6.73, 7.07, 8.18, 5.35, 8.05, 8.03, 6.99, 6.60, 12.9, 12.9, 12.8, 12.5, 8.84, 8.84, 8.84, 7.97, 7.95, 7.97, 7.97, 6.63, 6.63, 6.66, 6.66, 7.10, 7.10, 3.33, 3.33, 3.33, 5.35, 6.43, 6.43, 6.43, 8.95, 8.62, 8.62, 5.88, 5.88, 5.88, 7.97])
        c=np.array([0.00690, 0.00690, 0.02028, 0.00942, 0.01140, 0.01142, 0.00357, 0.00492, 0.00573, 0.00605, 0.00515, 0.00569, 0.00421, 0.00752, 0.00752, 0.00752, 0.00313, 0.00313, 0.00313, 0.00313, 0.00298, 0.00298, 0.00284, 0.00284, 0.00277, 0.00277, 0.52124, 0.52124, 0.52124, 0.01140, 0.00160, 0.00160, 0.00160, 0.00010, 0.00010, 0.00010, 0.01610, 0.01610, 0.01610, 0.00313])
        alpha=np.array([60, 60, 100, 120, 50, 80, 100, 130, 150, 280, 220, 225, 300, 520, 510, 510, 220, 222, 220, 220, 290, 285, 295, 295, 310, 310, 360, 360, 360, 50, 80, 80, 80, 65, 70, 70, 100, 100, 100, 220])
        beta=np.array([-2.22, -2.22, -2.36, -3.14, -1.89, -3.08, -3.06, -2.32, -2.11, -4.34, -4.34, -4.28, -4.18, -3.34, -3.55, -3.55, -2.68, -2.66, -2.68, -2.68, -2.22, -2.22, -2.26, -2.26, -2.42, -2.42, -1.11, -1.11, -1.11, -1.89, -2.08, -2.08, -2.08, -3.48, -3.24, -3.24, -1.98, -1.98, -1.98, -2.68])
        gamma=np.array([0.0480, 0.0480, 0.0762, 0.0540, 0.0850, 0.0854, 0.0242, 0.0310, 0.0335, 0.4250, 0.0322, 0.0338, 0.0296, 0.0512, 0.0496, 0.0496, 0.0151, 0.0151, 0.0151, 0.0151, 0.0145, 0.0145, 0.0138, 0.0138, 0.0132, 0.0132, 18.420, 18.420, 18.420, 0.0850, 0.0121, 0.0121, 0.0121, 0.0012, 0.0012, 0.0012, 0.0950, 0.0950, 0.0950, 0.0151])
        delta=np.array([0.05690, 0.05690, 0.05690, 0.04540, 0.04060, 0.05690, 0.02846, 0.02846, 0.02846, 0.02846, 0.02846, 0.02846, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.04060, 0.04060, 0.04060, 0.04060, 0.04540, 0.04540, 0.04540, 0.02846, 0.02846, 0.02846, 0.06770, 0.06770, 0.06770, 0.02075])
        eta=np.array([1.3100, 1.3100, 1.3100, 0.9142, 0.9936, 1.3100, 0.6550, 0.6550, 0.6550, 0.6550, 0.6550, 0.6550, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.9936, 0.9936, 0.9936, 0.9936, 0.9142, 0.9142, 0.9142, 0.6550, 0.6550, 0.6550, 1.4200, 1.4200, 1.4200, 0.5035])
        array= (Pmax+Pmin)/2<120
        UR= array*(Pmax+Pmin)/2 + (1-array)*120
        DR=UR
    
    elif N==100:
        #Data  inspired from 40gen test case
        Demand = 14500 #MW
        Pmin=np.array([36, 36, 60, 80, 47, 68, 110, 135, 135, 130, 94, 94, 125, 125, 125, 125, 220, 220, 242, 242, 254, 254, 254, 254, 254, 254, 10, 10, 10, 47, 60, 60, 60, 90, 90, 90, 25, 25, 25, 242])
        Pmax=np.array([114, 114, 120, 190, 97, 140, 300, 300, 300, 300, 375, 375, 500, 500, 500, 500, 500, 500, 550, 550, 550, 550, 550, 550, 550, 550, 150, 150, 150, 97, 190, 190, 190, 200, 200, 200, 110, 110, 110, 550])
        
        Pmin=np.hstack((Pmin[:20],Pmin,Pmin))
        Pmax=np.hstack((Pmax[:20],Pmax,Pmax))
        
        a=np.array([94.705, 94.705, 309.540, 369.030, 148.890, 222.330, 287.710, 391.980, 455.760, 722.820, 635.200, 654.690, 913.400, 1760.400, 1760.400, 1760.400, 647.850, 649.690, 647.830, 647.810, 785.960, 785.960, 794.530, 794.530, 801.320, 801.320, 1055.100, 1055.100, 1055.100, 148.890, 222.920, 222.920, 222.920, 107.870, 116.580, 116.580, 307.450, 307.450, 307.450, 647.830])
        b=np.array([6.73, 6.73, 7.07, 8.18, 5.35, 8.05, 8.03, 6.99, 6.60, 12.9, 12.9, 12.8, 12.5, 8.84, 8.84, 8.84, 7.97, 7.95, 7.97, 7.97, 6.63, 6.63, 6.66, 6.66, 7.10, 7.10, 3.33, 3.33, 3.33, 5.35, 6.43, 6.43, 6.43, 8.95, 8.62, 8.62, 5.88, 5.88, 5.88, 7.97])
        c=np.array([0.00690, 0.00690, 0.02028, 0.00942, 0.01140, 0.01142, 0.00357, 0.00492, 0.00573, 0.00605, 0.00515, 0.00569, 0.00421, 0.00752, 0.00752, 0.00752, 0.00313, 0.00313, 0.00313, 0.00313, 0.00298, 0.00298, 0.00284, 0.00284, 0.00277, 0.00277, 0.52124, 0.52124, 0.52124, 0.01140, 0.00160, 0.00160, 0.00160, 0.00010, 0.00010, 0.00010, 0.01610, 0.01610, 0.01610, 0.00313])
        alpha=np.array([60, 60, 100, 120, 50, 80, 100, 130, 150, 280, 220, 225, 300, 520, 510, 510, 220, 222, 220, 220, 290, 285, 295, 295, 310, 310, 360, 360, 360, 50, 80, 80, 80, 65, 70, 70, 100, 100, 100, 220])
        beta=np.array([-2.22, -2.22, -2.36, -3.14, -1.89, -3.08, -3.06, -2.32, -2.11, -4.34, -4.34, -4.28, -4.18, -3.34, -3.55, -3.55, -2.68, -2.66, -2.68, -2.68, -2.22, -2.22, -2.26, -2.26, -2.42, -2.42, -1.11, -1.11, -1.11, -1.89, -2.08, -2.08, -2.08, -3.48, -3.24, -3.24, -1.98, -1.98, -1.98, -2.68])
        gamma=np.array([0.0480, 0.0480, 0.0762, 0.0540, 0.0850, 0.0854, 0.0242, 0.0310, 0.0335, 0.4250, 0.0322, 0.0338, 0.0296, 0.0512, 0.0496, 0.0496, 0.0151, 0.0151, 0.0151, 0.0151, 0.0145, 0.0145, 0.0138, 0.0138, 0.0132, 0.0132, 18.420, 18.420, 18.420, 0.0850, 0.0121, 0.0121, 0.0121, 0.0012, 0.0012, 0.0012, 0.0950, 0.0950, 0.0950, 0.0151])
        delta=np.array([0.05690, 0.05690, 0.05690, 0.04540, 0.04060, 0.05690, 0.02846, 0.02846, 0.02846, 0.02846, 0.02846, 0.02846, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.02075, 0.04060, 0.04060, 0.04060, 0.04060, 0.04540, 0.04540, 0.04540, 0.02846, 0.02846, 0.02846, 0.06770, 0.06770, 0.06770, 0.02075])
        eta=np.array([1.3100, 1.3100, 1.3100, 0.9142, 0.9936, 1.3100, 0.6550, 0.6550, 0.6550, 0.6550, 0.6550, 0.6550, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.5035, 0.9936, 0.9936, 0.9936, 0.9936, 0.9142, 0.9142, 0.9142, 0.6550, 0.6550, 0.6550, 1.4200, 1.4200, 1.4200, 0.5035])
        
        a=np.hstack((a[:20],a,a))
        b=np.hstack((b[:20],b,b))
        c=np.hstack((c[:20],c,c))
        alpha=np.hstack((alpha[:20],alpha,alpha))
        beta=np.hstack((beta[:20],beta,beta))
        gamma=np.hstack((gamma[:20],gamma,gamma))
        delta=np.hstack((delta[:20],delta,delta))
        eta=np.hstack((eta[:20],eta,eta))
        
        array= (Pmax+Pmin)/2<120
        UR= array*(Pmax+Pmin)/2 + (1-array)*120
        DR=UR

    return(Demand,Pmax,Pmin,a,b,c,alpha,beta,gamma,delta,eta,UR,DR)